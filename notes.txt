yum install docker
systemctl enable docker
systemctl start docker


# Set SELinux in permissive mode (effectively disabling it)
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config


# This overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF


sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes


sudo systemctl enable --now kubelet

sudo kubeadm reset

kubeadm init  --apiserver-advertise-address=<control-node-private-ipv4> --pod-network-cidr=192.168.0.0/16(calico)


mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/tigera-operator.yaml
kubectl get nodes


172.31.61.126

54.237.94.122



# - name: Set up Kubernetes for k8s user
#   command: "{{ item }}"
#   when: inventory_hostname in groups['k8s-master']
#   with_items:
#     - mkdir -p /home/k8s/.kube
#     - cp -i /etc/kubernetes/admin.conf /home/k8s/.kube/config
#     - chown k8s:k8s /home/k8s/.kube/config

# - name: Install Flannel pod network
#   become: false
#   when: inventory_hostname in groups['k8s-master']
#   command: kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml



# - name: Restart kubelet
#   service:
#     name: kubelet
#     daemon_reload: yes
#     state: restarted






# - name: Retrieve Kubernetes join command that is used to join worker node(s)
#   become: false
#   when: inventory_hostname in groups['k8s-master']
#   shell: kubeadm token create --print-join-command
#   register: join_command

# - name: Attach kubeadm join command to a file on Ansible control node
#   when: inventory_hostname in groups['k8s-master']
#   local_action: "copy content='{{ join_command.stdout_lines[0] }}' dest=join-command"

# - name: Copy the join-command file created above to worker node
#   when: inventory_hostname in groups['k8s-worker']
#   copy: src=join-command dest=/tmp/kubeadm-join.sh mode=0777

# - name: Join the worker node to cluster
#   when: inventory_hostname in groups['k8s-worker']
#   command: sh /tmp/kubeadm-join.sh

  
# - name: Remove swapfile from /etc/fstab
#   mount:
#     name: "{{ item }}"
#     fstype: swap
#     state: absent
#   with_items:
#     - swap
#     - none

# - name: Disable swap
#   command: swapoff -a
#   when: ansible_swaptotal_mb > 0

# - name: Disable IPtables
#   command: iptables -F

# - name: Disable SELinux
#   command: setenforce 0


# - name: Deploy Calico network
#   become: true
#   when: inventory_hostname in groups['k8s-master']
#   command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/tigera-operator.yaml


# - name: Pause for 2 minutes
#   when: inventory_hostname in groups['k8s-master']
#   pause:
#     minutes: 2








# - name: Generate join command
#   when: inventory_hostname in groups['k8s-master']
#   become: true
#   shell: kubeadm token create --print-join-command
#   register: join_command

# - name: Copy join command to local file
#   when: inventory_hostname in groups['k8s-master']
#   delegate_to: localhost
#   ansible.builtin.copy:
#     content: "{{ join_command.stdout_lines[0] }}"
#     dest: "/Users/user/tmp/join-command.sh"  
#     mode: 'u+rwx'

# - name: Copy the join command to worker node
#   when: inventory_hostname in groups['k8s-worker']  
#   ansible.builtin.copy:
#     content: "/Users/user/tmp/join-command.sh"  
#     dest: "/tmp/join-command.sh"
#     mode: 'u+rwx'

# - name: Join the node to cluster
#   when: inventory_hostname in groups['k8s-worker']
#   become: true
#   ansible.builtin.command: sh /tmp/join-command.sh
# - name: Generate join command
#   when: inventory_hostname in groups['k8s-master']
#   become: true
#   shell: kubeadm token create --print-join-command
#   register: join_command

    