---
- name: Gather facts
  ansible.builtin.setup:
  
- name: Add YUM repository for Kubernetes (for YUM-based enviroments)
  ansible.builtin.copy:
    src: ../files/yum-kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
  when: ansible_facts['os_family'] == 'RedHat'

- name: Add APT repository for Kubernetes (for APT-based enviroments)
  ansible.builtin.copy:
    src: ../files/apt-kubernetes.list
    dest: /etc/apt/sources.list.d/kubernetes.list
  when: ansible_facts['os_family'] == 'Debian'

- name: Install Kubernetes packages
  ansible.builtin.package:
    name:
      - "{{ kubernetes_packages }}"
    state: present
  when: ansible_facts['os_family'] == 'RedHat' 

- name: Install Kubernetes packages
  ansible.builtin.package:
    name:
      - "{{ kubernetes_packages }}"
    state: present
  when: ansible_facts['os_family'] == 'Debian'  

- name: Reset Kubernetes cluster
  become: true
  when: inventory_hostname in groups['k8s-master']
  ansible.builtin.command: kubeadm reset -f
  notify:
    - restart kubelet

- name: Initialize the Kubernetes cluster using kubeadm command
  become: true
  when: inventory_hostname in groups['k8s-master']
  nsible.builtin.command: kubeadm init --apiserver-advertise-address="{{ api_server_ip }}" --pod-network-cidr="{{ pod_network_cidr }}"

- name: Create .kube directory
  when: inventory_hostname in groups['k8s-master']
  ansible.builtin.file:
    path: $HOME/.kube
    state: directory

- name: Copy admin.conf to user's kube config
  when: inventory_hostname in groups['k8s-master']
  become: true
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: $HOME/.kube/config
    remote_src: yes
    
- name: Set ownership of kube config
  when: inventory_hostname in groups['k8s-master']
  become: true
  ansible.builtin.file:
    path: $HOME/.kube/config
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"

- name: Deploy Calico Pod network
  become: true
  shell: kubectl apply -f "{{ calico_tigera_operator_yaml_url }}" >> pod_network_setup.txt
  args:
    chdir: $HOME
    creates: pod_network_setup.txt

- name: Generate join command
  when: inventory_hostname in groups['k8s-master']
  become: true
  shell: kubeadm token create --print-join-command
  register: join_command

- name: Set join command
  when: inventory_hostname in groups['k8s-master']
  become: true
  set_fact:
    join_command: "{{ join_command.stdout_lines[0] }}"

- name: Apply join command
  when: inventory_hostname in groups['k8s-worker']
  become: true
  shell: "{{ hostvars[groups['k8s-master'][0]].join_command }} >> node_joined.txt"
  args:
    chdir: $HOME
    creates: node_joined.txt

- name: Get cluster nodes
  become: true
  when: inventory_hostname in groups['k8s-master']
  nsible.builtin.command: kubectl get nodes
  register: cluster_nodes

- name: Print cluster nodes
  become: true
  when: inventory_hostname in groups['k8s-master']
  debug:
    var: cluster_nodes.stdout_lines